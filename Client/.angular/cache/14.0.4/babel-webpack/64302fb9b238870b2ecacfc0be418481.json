{"ast":null,"code":"import { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\nexport class Subscriber extends Subscription {\n  constructor(destination) {\n    super();\n    this.isStopped = false;\n\n    if (destination) {\n      this.destination = destination;\n\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  static create(next, error, complete) {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  next(value) {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value);\n    }\n  }\n\n  error(err) {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  }\n\n  complete() {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null;\n    }\n  }\n\n  _next(value) {\n    this.destination.next(value);\n  }\n\n  _error(err) {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  _complete() {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n}\nexport class SafeSubscriber extends Subscriber {\n  constructor(observerOrNext, error, complete) {\n    super();\n    let next;\n\n    if (isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      ({\n        next,\n        error,\n        complete\n      } = observerOrNext);\n      let context;\n\n      if (this && config.useDeprecatedNextContext) {\n        context = Object.create(observerOrNext);\n\n        context.unsubscribe = () => this.unsubscribe();\n      } else {\n        context = observerOrNext;\n      }\n\n      next = next === null || next === void 0 ? void 0 : next.bind(context);\n      error = error === null || error === void 0 ? void 0 : error.bind(context);\n      complete = complete === null || complete === void 0 ? void 0 : complete.bind(context);\n    }\n\n    this.destination = {\n      next: next ? wrapForErrorHandling(next, this) : noop,\n      error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler, this),\n      complete: complete ? wrapForErrorHandling(complete, this) : noop\n    };\n  }\n\n}\n\nfunction wrapForErrorHandling(handler, instance) {\n  return (...args) => {\n    try {\n      handler(...args);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(err);\n      } else {\n        reportUnhandledError(err);\n      }\n    }\n  };\n}\n\nfunction defaultErrorHandler(err) {\n  throw err;\n}\n\nfunction handleStoppedNotification(notification, subscriber) {\n  const {\n    onStoppedNotification\n  } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\nexport const EMPTY_OBSERVER = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop\n};","map":{"version":3,"names":["isFunction","isSubscription","Subscription","config","reportUnhandledError","noop","nextNotification","errorNotification","COMPLETE_NOTIFICATION","timeoutProvider","captureError","Subscriber","constructor","destination","isStopped","add","EMPTY_OBSERVER","create","next","error","complete","SafeSubscriber","value","handleStoppedNotification","_next","err","_error","_complete","unsubscribe","closed","observerOrNext","context","useDeprecatedNextContext","Object","bind","wrapForErrorHandling","defaultErrorHandler","handler","instance","args","useDeprecatedSynchronousErrorHandling","notification","subscriber","onStoppedNotification","setTimeout"],"sources":["C:/Users/smohamed/Desktop/Delievred Files/node_modules/rxjs/dist/esm/internal/Subscriber.js"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\nexport class Subscriber extends Subscription {\n    constructor(destination) {\n        super();\n        this.isStopped = false;\n        if (destination) {\n            this.destination = destination;\n            if (isSubscription(destination)) {\n                destination.add(this);\n            }\n        }\n        else {\n            this.destination = EMPTY_OBSERVER;\n        }\n    }\n    static create(next, error, complete) {\n        return new SafeSubscriber(next, error, complete);\n    }\n    next(value) {\n        if (this.isStopped) {\n            handleStoppedNotification(nextNotification(value), this);\n        }\n        else {\n            this._next(value);\n        }\n    }\n    error(err) {\n        if (this.isStopped) {\n            handleStoppedNotification(errorNotification(err), this);\n        }\n        else {\n            this.isStopped = true;\n            this._error(err);\n        }\n    }\n    complete() {\n        if (this.isStopped) {\n            handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n        }\n        else {\n            this.isStopped = true;\n            this._complete();\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            this.isStopped = true;\n            super.unsubscribe();\n            this.destination = null;\n        }\n    }\n    _next(value) {\n        this.destination.next(value);\n    }\n    _error(err) {\n        try {\n            this.destination.error(err);\n        }\n        finally {\n            this.unsubscribe();\n        }\n    }\n    _complete() {\n        try {\n            this.destination.complete();\n        }\n        finally {\n            this.unsubscribe();\n        }\n    }\n}\nexport class SafeSubscriber extends Subscriber {\n    constructor(observerOrNext, error, complete) {\n        super();\n        let next;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            ({ next, error, complete } = observerOrNext);\n            let context;\n            if (this && config.useDeprecatedNextContext) {\n                context = Object.create(observerOrNext);\n                context.unsubscribe = () => this.unsubscribe();\n            }\n            else {\n                context = observerOrNext;\n            }\n            next = next === null || next === void 0 ? void 0 : next.bind(context);\n            error = error === null || error === void 0 ? void 0 : error.bind(context);\n            complete = complete === null || complete === void 0 ? void 0 : complete.bind(context);\n        }\n        this.destination = {\n            next: next ? wrapForErrorHandling(next, this) : noop,\n            error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler, this),\n            complete: complete ? wrapForErrorHandling(complete, this) : noop,\n        };\n    }\n}\nfunction wrapForErrorHandling(handler, instance) {\n    return (...args) => {\n        try {\n            handler(...args);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                captureError(err);\n            }\n            else {\n                reportUnhandledError(err);\n            }\n        }\n    };\n}\nfunction defaultErrorHandler(err) {\n    throw err;\n}\nfunction handleStoppedNotification(notification, subscriber) {\n    const { onStoppedNotification } = config;\n    onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\nexport const EMPTY_OBSERVER = {\n    closed: true,\n    next: noop,\n    error: defaultErrorHandler,\n    complete: noop,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}