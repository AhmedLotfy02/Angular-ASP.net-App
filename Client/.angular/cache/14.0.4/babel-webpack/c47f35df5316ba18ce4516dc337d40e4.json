{"ast":null,"code":"import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n  return operate((source, subscriber) => {\n    let element;\n\n    if (!elementOrOptions || typeof elementOrOptions === 'function') {\n      element = elementOrOptions;\n    } else {\n      ({\n        duration,\n        element,\n        connector\n      } = elementOrOptions);\n    }\n\n    const groups = new Map();\n\n    const notify = cb => {\n      groups.forEach(cb);\n      cb(subscriber);\n    };\n\n    const handleError = err => notify(consumer => consumer.error(err));\n\n    const groupBySourceSubscriber = new GroupBySubscriber(subscriber, value => {\n      try {\n        const key = keySelector(value);\n        let group = groups.get(key);\n\n        if (!group) {\n          groups.set(key, group = connector ? connector() : new Subject());\n          const grouped = createGroupedObservable(key, group);\n          subscriber.next(grouped);\n\n          if (duration) {\n            const durationSubscriber = new OperatorSubscriber(group, () => {\n              group.complete();\n              durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            }, undefined, undefined, () => groups.delete(key));\n            groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber));\n          }\n        }\n\n        group.next(element ? element(value) : value);\n      } catch (err) {\n        handleError(err);\n      }\n    }, () => notify(consumer => consumer.complete()), handleError, () => groups.clear());\n    source.subscribe(groupBySourceSubscriber);\n\n    function createGroupedObservable(key, groupSubject) {\n      const result = new Observable(groupSubscriber => {\n        groupBySourceSubscriber.activeGroups++;\n        const innerSub = groupSubject.subscribe(groupSubscriber);\n        return () => {\n          innerSub.unsubscribe();\n          --groupBySourceSubscriber.activeGroups === 0 && groupBySourceSubscriber.teardownAttempted && groupBySourceSubscriber.unsubscribe();\n        };\n      });\n      result.key = key;\n      return result;\n    }\n  });\n}\n\nclass GroupBySubscriber extends OperatorSubscriber {\n  constructor() {\n    super(...arguments);\n    this.activeGroups = 0;\n    this.teardownAttempted = false;\n  }\n\n  unsubscribe() {\n    this.teardownAttempted = true;\n    this.activeGroups === 0 && super.unsubscribe();\n  }\n\n}","map":{"version":3,"names":["Observable","innerFrom","Subject","operate","OperatorSubscriber","groupBy","keySelector","elementOrOptions","duration","connector","source","subscriber","element","groups","Map","notify","cb","forEach","handleError","err","consumer","error","groupBySourceSubscriber","GroupBySubscriber","value","key","group","get","set","grouped","createGroupedObservable","next","durationSubscriber","complete","unsubscribe","undefined","delete","add","subscribe","clear","groupSubject","result","groupSubscriber","activeGroups","innerSub","teardownAttempted","constructor","arguments"],"sources":["C:/Users/smohamed/Desktop/Delievred Files/node_modules/rxjs/dist/esm/internal/operators/groupBy.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n    return operate((source, subscriber) => {\n        let element;\n        if (!elementOrOptions || typeof elementOrOptions === 'function') {\n            element = elementOrOptions;\n        }\n        else {\n            ({ duration, element, connector } = elementOrOptions);\n        }\n        const groups = new Map();\n        const notify = (cb) => {\n            groups.forEach(cb);\n            cb(subscriber);\n        };\n        const handleError = (err) => notify((consumer) => consumer.error(err));\n        const groupBySourceSubscriber = new GroupBySubscriber(subscriber, (value) => {\n            try {\n                const key = keySelector(value);\n                let group = groups.get(key);\n                if (!group) {\n                    groups.set(key, (group = connector ? connector() : new Subject()));\n                    const grouped = createGroupedObservable(key, group);\n                    subscriber.next(grouped);\n                    if (duration) {\n                        const durationSubscriber = new OperatorSubscriber(group, () => {\n                            group.complete();\n                            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n                        }, undefined, undefined, () => groups.delete(key));\n                        groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber));\n                    }\n                }\n                group.next(element ? element(value) : value);\n            }\n            catch (err) {\n                handleError(err);\n            }\n        }, () => notify((consumer) => consumer.complete()), handleError, () => groups.clear());\n        source.subscribe(groupBySourceSubscriber);\n        function createGroupedObservable(key, groupSubject) {\n            const result = new Observable((groupSubscriber) => {\n                groupBySourceSubscriber.activeGroups++;\n                const innerSub = groupSubject.subscribe(groupSubscriber);\n                return () => {\n                    innerSub.unsubscribe();\n                    --groupBySourceSubscriber.activeGroups === 0 &&\n                        groupBySourceSubscriber.teardownAttempted &&\n                        groupBySourceSubscriber.unsubscribe();\n                };\n            });\n            result.key = key;\n            return result;\n        }\n    });\n}\nclass GroupBySubscriber extends OperatorSubscriber {\n    constructor() {\n        super(...arguments);\n        this.activeGroups = 0;\n        this.teardownAttempted = false;\n    }\n    unsubscribe() {\n        this.teardownAttempted = true;\n        this.activeGroups === 0 && super.unsubscribe();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}